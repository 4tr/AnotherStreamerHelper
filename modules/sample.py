# обязательный блок описания
__plugin__ = {
    "name": "sample module(one file)",
    "description": "пример минимального кода для модуля в виде одиночного файла в корне папки модулей",
    "type": "test" ,
    "autorun":True, # на данный момент используется как команда к загрузке модуля (пока нет других настроек заменяющее это)
    "first_load": True, # переносит модуль в список загружаемых в первую очередь
    "run_mode": 0 #0 - standart,  1 - thread, 2 - multiprocessing    
}


# не обязательно, но необходимо для того чтобы предоставить другим модулям "точку входа" в виде хуков
from data import app_data
ho = app_data.hook

# не обязательный блок
# запускает функции внутри класся если будут соответствующие точки входа в других местах кода
# добавить хук в код, чтобы предоставить другим приложениям работать с данными: ho("test_hook",text)
# все одноименные функции хуков собираются в массив и обрабатываются по очереди когда система обрацается к хукам.
class hook:
    def test_hook_one(data):        
        print("Привет из хука test_hook_one тестового модуля1 ", data)
        return # !!! ВАЖНО указать в каждой функции хука. если вывод не писать хук будет забракован при загрузке
    def test_hook_two(data):        
        print("Привет из хука test_hook_two тестового модуля1 ", data)
        return # !!! ВАЖНО указать в каждой функции хука. если вывод не писать хук будет забракован при загрузке       
        
# запускается после помещения модуля в список загруженных модулей (приложения) 
def run():
    print("["+__name__.split(".")[-1]+"] OK") 
    text = "---данные с модуля1---"
    print("запускается хук : test_hook_one из модуля1 ")
    ho("test_hook_one",text)
    print("запускается хук : test_hook_two из модуля1 ")
    ho("test_hook_two",text)
    print("["+__name__.split(".")[-1]+"] завершил работу функции запуска") 
       

# пока не используется но обязательно***
def save():
    print("сохранение")

# пока не используется но обязательно***
def load():
    print("загрузка") 
    


